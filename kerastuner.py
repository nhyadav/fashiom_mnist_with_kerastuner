# -*- coding: utf-8 -*-
"""kerastuner.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16wG08zvdCG0Bwrfx5l_5e2ZykOIdaMIB

creaing CNN model
"""

!pip install keras-tuner

import tensorflow as tf
from tensorflow import keras
import numpy as np

print(tf.__version__)

fashion_mnist = keras.datasets.fashion_mnist

(train_img,train_label),(test_img,test_label) = fashion_mnist.load_data()

train_img=train_img/255.0
test_img=test_img/255.0

train_img[0].shape

train_img=train_img.reshape(len(train_img),28,28,1)
test_img=test_img.reshape(len(test_img),28,28,1)

from tensorflow.keras import layers

def build_model(hp):
  model=keras.Sequential([
                          layers.Conv2D(filters=hp.Int('conv_1_filter',min_value=32,max_value=128, step=16),
                          kernel_size=hp.Choice('conv_1_kernal',values=[3,5]), activation='relu',input_shape=(28,28,1)),

                          layers.Conv2D(filters=hp.Int('conv_2_filter',min_value=32,max_value=64, step=16),
                          kernel_size=hp.Choice('conv_2_kernal',values=[3,5]), activation='relu'),

                          layers.Flatten(),
                          layers.Dense(units=hp.Int('dense_1_units', min_value=32, max_value=128, step=16),activation='relu'),
                          layers.Dense(10,activation='softmax')
  ])
                  
  model.compile(optimizer=keras.optimizers.Adam(hp.Choice('learning_rate', values=[1e-2,1e-3])),loss='sparse_categorical_crossentropy',metrics=['accuracy'])

  return model

from kerastuner.tuners import RandomSearch
from kerastuner.engine.hyperparameters import HyperParameters

tuner_search=RandomSearch(build_model,objective='val_accuracy',max_trials=5,directory='output',project_name='mnist_fashion')

tuner_search.search(train_img,train_label,epochs=3,validation_split=0.1)

model=tuner_search.get_best_models(num_models=1)[0]

model.summary()

model.fit(train_img,train_label,epochs=10,validation_split=0.1,initial_epoch=3)

model.predict(test_img,verbose=1)

